/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.1.0
 * apibuilder 0.14.75 app.apibuilder.io/paintbatch-com/paint-batch-optimizer/0.1.0/http4s_0_20
 */
package com.paintbatch.models {

  /**
   * health of the service
   * 
   * @param status the health status of the service
   */
  final case class Healthcheck(
    status: com.paintbatch.models.Status
  )

  /**
   * health of the service
   */
  sealed trait Status extends _root_.scala.Product with _root_.scala.Serializable

  object Status {

    /**
     * represents the service is live and accepting traffic
     */
    case object Ok extends Status { override def toString = "ok" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends Status

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Status] = scala.List(Ok)

    private[this]
    val byName: Map[String, Status] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Status = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Status] = byName.get(value.toLowerCase)

  }

}

package com.paintbatch.models {

  package object json {
    import io.circe.Decoder._
    import io.circe.Encoder._
    import scala.language.implicitConversions // See below - Make Scala 2.11 Either monadic
    import scala.util.Try
    import io.circe.{Json, JsonObject, Encoder, Decoder, DecodingFailure}
    import io.circe.syntax._
    import com.paintbatch.models.json._

    // Make Scala 2.11 Either monadic
    private[paintbatch] implicit def eitherOps[A,B](e: Either[A,B]) = cats.implicits.catsSyntaxEither(e)

    private[paintbatch] implicit val decodeUUID: Decoder[_root_.java.util.UUID] =
      Decoder.decodeString.emapTry(str => Try(_root_.java.util.UUID.fromString(str)))

    private[paintbatch] implicit val encodeUUID: Encoder[_root_.java.util.UUID] =
      Encoder.encodeString.contramap[_root_.java.util.UUID](uuid => uuid.toString)

    private[paintbatch] implicit val decodeInstant: Decoder[_root_.java.time.Instant] =
      Decoder.decodeString.emapTry(str => Try(_root_.java.time.OffsetDateTime.parse(str).toInstant))

    private[paintbatch] implicit val encodeInstant: Encoder[_root_.java.time.Instant] =
      Encoder.encodeString.contramap[_root_.java.time.Instant](_.toString)

    private[paintbatch] implicit val decodeLocalDate: Decoder[_root_.java.time.LocalDate] =
      Decoder.decodeString.emapTry(str => Try(_root_.java.time.LocalDate.parse(str)))

    private[paintbatch] implicit val encodeLocalDate: Encoder[_root_.java.time.LocalDate] =
      Encoder.encodeString.contramap[_root_.java.time.LocalDate](_.toString)

    implicit val jsonDecoderPaintBatchOptimizerStatus: Decoder[com.paintbatch.models.Status] =
      Decoder.decodeString.map(com.paintbatch.models.Status(_))

    implicit val jsonEncoderPaintBatchOptimizerStatus: Encoder[com.paintbatch.models.Status] =
      Encoder.encodeString.contramap[com.paintbatch.models.Status](_.toString)

    implicit def decodePaintBatchOptimizerHealthcheck: Decoder[Healthcheck] = Decoder.instance { c =>
     for {
        status <- c.downField("status").as[com.paintbatch.models.Status]
      } yield {
        Healthcheck(
          status = status
        )
      }
    }

    implicit def encodePaintBatchOptimizerHealthcheck: Encoder[Healthcheck] = Encoder.instance { t =>
      Json.fromFields(Seq(
        Some("status" -> t.status.asJson)
      ).flatten)
    }
  }
}